buildscript {
  repositories {
    mavenCentral()
    jcenter()
  }
  dependencies {
    classpath 'net.saliman:gradle-cobertura-plugin:2.2.4'
    classpath 'com.github.jengelman.gradle.plugins:shadow:1.0.3'
    // https://github.com/kt3k/coveralls-gradle-plugin
    classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.3.1'
    classpath 'com.netflix.nebula:gradle-ospackage-plugin:2.2.0'
    classpath 'com.commercehub.gradle.plugin:gradle-avro-plugin:0.3.4'
  }
}

group = 'com.verisign.storm.metrics'
version = '1.0.0-SNAPSHOT'
description = "An IMetricsConsumer that forwards Storm's built-in metrics to a Graphite server for real-time graphing."

apply plugin: 'java'
apply plugin: 'cobertura'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'os-package'
apply plugin: 'com.commercehub.gradle.plugin.avro'

// Helper functions for RPM metadata
def shortCommit = "git rev-parse --short HEAD".execute().in.text.trim()
def buildTime() {
  def df = new java.text.SimpleDateFormat('yyyyMMdd')
  df.setTimeZone(TimeZone.getTimeZone('UTC'))
  return df.format(new Date())
}

ext {
  jdkVersion = '1.7'
  metricsVersion = '3.1.0'

  // RPM metadata
  rpmMaintainer = System.getenv('MAINTAINER') ?: 'change.this@email.com'

  rpmVersion = System.getenv('VERSION') ?: "${project.version}"
  isSnapshot = rpmVersion.endsWith('-SNAPSHOT') ? true : false
  if (isSnapshot) {
    rpmVersion = rpmVersion.replace('-SNAPSHOT', '')
  }

  rpmRelease = '1'
  overriddenRpmRelease = System.getenv('RPM_RELEASE')
  if (overriddenRpmRelease != null) {
    rpmRelease = overriddenRpmRelease
  }
  else if (isSnapshot) {
    defaultBuildNumber = '1'
    releaseNumberIncrement = System.getenv('BUILD_NUMBER') ?: "${defaultBuildNumber}"
    snapshotReleaseTag = "0.${releaseNumberIncrement}.${buildTime()}git${shortCommit}"
    rpmVersion = rpmVersion.replace('-SNAPSHOT', '')
    rpmRelease = snapshotReleaseTag
  }

}

sourceCompatibility = jdkVersion
targetCompatibility = jdkVersion

repositories {
  mavenCentral()
  maven { url 'https://clojars.org/repo' }
  maven { url 'http://packages.confluent.io/maven/' }
}

dependencies {

  compile(
      ['com.google.guava:guava:17.0'],
      ["io.dropwizard.metrics:metrics-core:${metricsVersion}"],
      ["io.dropwizard.metrics:metrics-graphite:${metricsVersion}"],
      ["org.coursera:metrics-datadog:1.1.3"],
      ["com.twitter:bijection-core_2.10:0.7.0"],
      ["com.twitter:bijection-avro_2.10:0.7.0"],
      ["com.twitter:util-core_2.10:6.1.0"],
      ["org.apache.kafka:kafka_2.10:0.8.2.0-cp"],
      ["io.confluent:kafka-avro-serializer:1.0"],
      ["io.confluent:kafka-schema-registry-client:1.0"],
      ["org.apache.avro:avro:1.7.6"]
  )

  compile(
      ['org.apache.storm:storm-core:1.0.1'],
  ) {
    // The log4j-over-slf4j dependency conflicts with slf4j-log4j12
    exclude module: 'log4j-over-slf4j'
  }

  testCompile(
      ['org.apache.curator:curator-test:2.6.0'],
      ['org.apache.curator:curator-framework:2.6.0'],
      ['org.uncommons:reportng:1.1.4'],
      ['org.mockito:mockito-all:1.9.5'],
      ['org.easytesting:fest-assert-core:2.0M10'],
      ['org.testng:testng:6.8.8'],
      // Manually require Google Guice.  This is a required workaround for a known issue with TestNG 6.x.
      // (Gradle will fail to run tests otherwise.)
      ['com.google.inject:guice:3.0'],
      ['org.apache.commons:commons-lang3:3.4']
  )

}

task sourcesJar(type: Jar, dependsOn: 'classes') {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: 'javadoc') {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar
  archives javadocJar
  archives shadowJar
}

test {
  useTestNG() {
    suiteXmlBuilder().suite(name: 'storm-graphite', parallel: 'tests', 'thread-count': '1') {
      test (name : 'all-tests') {
        packages {
          'package' (name: 'com.verisign.*')
        }
      }
    }
  }
  options {
    listeners << 'org.uncommons.reportng.HTMLReporter'
    listeners << 'org.uncommons.reportng.JUnitXMLReporter'
  }
  ext.useDefaultListeners = true
  ext.workingDirectory = 'build/'
}

// https://github.com/stevesaliman/gradle-cobertura-plugin
// http://ingorichter.blogspot.ch/2013/03/using-cobertura-with-gradle.html for list of options
cobertura {
  coverageFormats = ['xml', 'html'] // coveralls plugin depends on xml format report
}

task createWrapper(type: Wrapper) {
  gradleVersion = '2.3'
}

ospackage {
  packageName         project.name
  version             rpmVersion
  release             rpmRelease
  summary             description
  packageDescription  description
  packageGroup        'Development/Tools'
  packager            rpmMaintainer
  url                 'https://github.com/verisign/storm-graphite'
  type                BINARY
  arch                NOARCH
  os                  LINUX
  user                'root'
  vendor              'Verisign'
  license             'Apache License, Version 2.0'
}

buildRpm {
  packageName = "${project.name}_slim"
  into '/opt/storm'

  from(jar.outputs.files) {
    into 'lib'
  }
}
buildRpm.dependsOn(jar)

// Creates an RPM that packages an uber jar.
task rpm(type: Rpm) {
  packageName = "${project.name}"
  into '/opt/storm'

  from(shadowJar.outputs.files) {
    into 'lib'
  }
}
rpm.dependsOn(shadowJar)

buildDeb {
  packageName = "${project.name}_slim"
  into '/opt/storm'

  from(jar.outputs.files) {
    into 'lib'
  }
}
buildDeb.dependsOn(jar)

// Creates a DEB that packages an uber jar.
task deb(type: Deb) {
  packageName = "${project.name}"
  into '/opt/storm'

  from(shadowJar.outputs.files) {
    into 'lib'
  }
}
deb.dependsOn(shadowJar)

shadowJar {

  // Relocate Metrics and Schema Registry libraries to prevent conflicts with user code that depends on Metrics, too.
  relocate('com.codahale.metrics', 'com.verisign.storm-graphite.com.codahale.metrics')
  relocate('io.confluent.kafka', 'com.verisign.storm-graphite.io.confluent.kafka')

  dependencies {
    include(dependency("io.dropwizard.metrics:metrics-core:${metricsVersion}"))
    include(dependency("io.dropwizard.metrics:metrics-graphite:${metricsVersion}"))
    include(dependency("io.confluent:kafka-avro-serializer:1.0"))
    include(dependency("io.confluent:kafka-schema-registry-client:1.0"))
  }
}

// `build` should also create the uber/shadow jar by default.
build.dependsOn(shadowJar)

allprojects {
    tasks.withType(JavaCompile).configureEach {
        options.incremental = true
    }

}
